/*
 * Developer : 
 * Reviewer :
 * Description :
 * Created On :
 */
package UserInterface.customer;

import Business.supplier.SupplierDirectory;
import javax.swing.JPanel;
import Business.order.Order;
import Business.product.Product;
import Business.supplier.Supplier;
import Business.order.OrderItem;
import Business.customer.Customer;
import com.neu.css.util.Consts;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Laksh
 */
public class BrowseProductJPanel extends javax.swing.JPanel {
    private final JPanel userProcessContainer;
    private final SupplierDirectory supplierDirectory;
    private Order order;
    private final Customer customer; 

    /**
     * Creates new form BrowseProductJPanel
     * @param userProcessContainer
     * @param supplierDirectory
     * @param customer
     */
    public BrowseProductJPanel(JPanel userProcessContainer,SupplierDirectory supplierDirectory,Customer customer) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.supplierDirectory = supplierDirectory;
        this.customer = customer;
        order = new Order();
        populateCustomerID();
        populateSuppliers();
        refreshProductTable();
    }
    private void populateCustomerID(){
        customerIDTextField.setText(String.valueOf(customer.getPersonId()));
    }
    /**
     * 
     */
    private void populateSuppliers(){
        supplierComboBox.removeAllItems();
        supplierComboBox.addItem(Consts.ALL);
        for (Supplier supplier : supplierDirectory.getSupplierList()){
             supplierComboBox.addItem(supplier);
        }
    }
    /**
     *  refresh the product table
     */
    private void refreshProductTable(){
        DefaultTableModel defaultTableModel = (DefaultTableModel)productTable.getModel();
        defaultTableModel.setRowCount(0);
        if (null != supplierDirectory.getSupplierList()){
         for (Supplier supplier : supplierDirectory.getSupplierList()) {  
             if (null != supplier.getProductCatalog()){
                for (Product product : supplier.getProductCatalog().getProductList()){
                    Object[] rows =  new Object[4];
                    rows[0] = product;
                    rows[1] = product.getModelNumber();
                    rows[2] = product.getPrice();
                    rows[3] = product.getAvailable();
                    defaultTableModel.addRow(rows);
                    }
                }
             }
        }
    }
     /**
     * 
     */
    private void refreshOrderItemTable(){
        DefaultTableModel defaultTableModel = (DefaultTableModel)shoppingCartTable.getModel();
        defaultTableModel.setRowCount(0);         
        if (null != order.getOrderItemList()){
           for (OrderItem orderItem : order.getOrderItemList() ){
               Object[] rows =  new Object[4];
               rows[0] = orderItem;
               rows[1] = orderItem.getProduct().getPrice();
               rows[2] = orderItem.getQuantity();
               rows[3] = (orderItem.getQuantity() * orderItem.getProduct().getPrice());
               defaultTableModel.addRow(rows);
               }
           }
    }
     /**
     * 
     */
    private void refreshProductTableBySupplier(Supplier supplier){
        DefaultTableModel defaultTableModel = (DefaultTableModel)productTable.getModel();
        defaultTableModel.setRowCount(0);
        if (null != supplier.getProductCatalog().getProductList()){
            for (Product product : supplier.getProductCatalog().getProductList()){
                Object[] rows =  new Object[4];
                rows[0] = product;
                rows[1] = product.getModelNumber();
                rows[2] = product.getPrice();
                rows[3] = product.getAvailable();
                defaultTableModel.addRow(rows);
           }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        supplierComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        searchSupplierTextField = new javax.swing.JTextField();
        searchSupplierButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        viewProductDetailsButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        quantitySpinner = new javax.swing.JSpinner();
        addToCartButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        shoppingCartTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        viewOrderItemDetailButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        quantityTextField = new javax.swing.JTextField();
        updateQuantityButton = new javax.swing.JButton();
        removeItemButton = new javax.swing.JButton();
        checkOutButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        customerIDTextField = new javax.swing.JTextField();

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel1.setText("Browse Product Catatog");

        jLabel2.setText("Supplier");

        supplierComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        supplierComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierComboBoxActionPerformed(evt);
            }
        });

        jLabel3.setText("Search Supplier :");

        searchSupplierButton.setText("Search");
        searchSupplierButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchSupplierButtonActionPerformed(evt);
            }
        });

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Model Number", "Price", "Availability"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productTable);

        viewProductDetailsButton.setText("View Product Details");
        viewProductDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewProductDetailsButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Quantity : ");

        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        addToCartButton.setText("Add to Cart");
        addToCartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCartButtonActionPerformed(evt);
            }
        });

        shoppingCartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item Name", "Price", "Quantity", "Total Price"
            }
        ));
        jScrollPane2.setViewportView(shoppingCartTable);

        jLabel5.setText("Shopping Cart Item");

        viewOrderItemDetailButton.setText("View Order Item Detail");
        viewOrderItemDetailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOrderItemDetailButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Modify Quantity");

        quantityTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityTextFieldActionPerformed(evt);
            }
        });

        updateQuantityButton.setText("Update");
        updateQuantityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateQuantityButtonActionPerformed(evt);
            }
        });

        removeItemButton.setText("Remove Item");
        removeItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeItemButtonActionPerformed(evt);
            }
        });

        checkOutButton.setText("Check Out");
        checkOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOutButtonActionPerformed(evt);
            }
        });

        backButton.setText("<< Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("Login Customer Id");

        customerIDTextField.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(supplierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(54, 54, 54)
                                .addComponent(jLabel3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchSupplierTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(searchSupplierButton)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(customerIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(viewProductDetailsButton)
                        .addGap(50, 50, 50)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(77, 77, 77)
                        .addComponent(addToCartButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(viewOrderItemDetailButton)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(quantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(updateQuantityButton)
                        .addGap(18, 18, 18)
                        .addComponent(removeItemButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(backButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(checkOutButton)
                        .addGap(46, 46, 46)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(customerIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(supplierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(searchSupplierTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchSupplierButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewProductDetailsButton)
                    .addComponent(jLabel4)
                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addToCartButton))
                .addGap(54, 54, 54)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(jLabel5)
                .addGap(29, 29, 29)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewOrderItemDetailButton)
                    .addComponent(jLabel6)
                    .addComponent(quantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateQuantityButton)
                    .addComponent(removeItemButton))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkOutButton)
                    .addComponent(backButton))
                .addContainerGap(87, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void quantityTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityTextFieldActionPerformed
    /**
     * 
     * @param evt 
     */
    private void searchSupplierButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchSupplierButtonActionPerformed
        // TODO add your handling code here:
        String keyWord = searchSupplierTextField.getText();
        if (null == keyWord || "".equals(keyWord)){
            JOptionPane.showMessageDialog(null, "Please select the correct value of Supplier");
        }
        else {
             Supplier supplier = supplierDirectory.searchSupplier(keyWord);
             supplierComboBox.setSelectedItem(supplier);
             refreshProductTableBySupplier(supplier);
        }
    }//GEN-LAST:event_searchSupplierButtonActionPerformed

    private void addToCartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCartButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow =  productTable.getSelectedRow();
        if (selectedRow < 0 ){
            JOptionPane.showMessageDialog(null, "Please select the product from the list");
        } else {
            Product product = (Product)productTable.getValueAt(selectedRow, 0);
            int quantity = (Integer)quantitySpinner.getValue();
            if (quantity > product.getAvailable()) {
                JOptionPane.showMessageDialog(null, "Please select the desired quantity of product");
            } else {
                OrderItem orderItem = order.addOrderItem(product,quantity);
                product.setAvailable(product.getAvailable() - quantity);
                refreshTwoTables();
            }
        }
    }//GEN-LAST:event_addToCartButtonActionPerformed
    /**
     *  update the quantity of the table
     * @param evt 
     */
    private void updateQuantityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateQuantityButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = shoppingCartTable.getSelectedRow();
        if (selectedRow < 0 ){
            JOptionPane.showMessageDialog(null, "Please select the product from the list");
        } else {
            int newQuantity = Integer.parseInt(quantityTextField.getText());
            OrderItem orderItem = (OrderItem)shoppingCartTable.getValueAt(selectedRow, 0);
            int oldQuantity = orderItem.getQuantity();
            int currentAvailabilty = orderItem.getProduct().getAvailable();
            if (newQuantity > oldQuantity + currentAvailabilty || newQuantity <= 0) {
                JOptionPane.showMessageDialog(null, "Please select the desired quantity");
            } else {
                orderItem.setQuantity(newQuantity);
                orderItem.getProduct().setAvailable(oldQuantity + currentAvailabilty - newQuantity);
                refreshOrderItemTable();
                populateSuppliersProduct();
            }
        }
    }//GEN-LAST:event_updateQuantityButtonActionPerformed

    private void viewProductDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewProductDetailsButtonActionPerformed
         //TODO add your handling code here:
        int selectedRow =  productTable.getSelectedRow();
        if (selectedRow < 0 ){
            JOptionPane.showMessageDialog(null, "Please select the product from the list");
        } else {
            Product product = (Product)productTable.getValueAt(selectedRow, 0);
            ViewProductDetailsJPanel viewProductDetailsJPanel =  new ViewProductDetailsJPanel(userProcessContainer,product);
            userProcessContainer.add("ViewProductDetailsJPanel",viewProductDetailsJPanel);
            CardLayout cardLayout = (CardLayout)userProcessContainer.getLayout();
            cardLayout.next(userProcessContainer);
        }       
    }//GEN-LAST:event_viewProductDetailsButtonActionPerformed

    private void viewOrderItemDetailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOrderItemDetailButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = shoppingCartTable.getSelectedRow();
        if (selectedRow < 0 ){
            JOptionPane.showMessageDialog(null, "Please select the order from the list");
        } else {
            OrderItem orderItem = (OrderItem)shoppingCartTable.getValueAt(selectedRow, 0);
            ViewOrderItemJPanel viewOrderItemJPanel =  new ViewOrderItemJPanel(userProcessContainer,orderItem);
            userProcessContainer.add("ViewOrderItemJPanel",viewOrderItemJPanel);
            CardLayout cardLayout = (CardLayout)userProcessContainer.getLayout();
            cardLayout.next(userProcessContainer);
        }
    }//GEN-LAST:event_viewOrderItemDetailButtonActionPerformed

    private void removeItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = shoppingCartTable.getSelectedRow();
        if (selectedRow < 0 ){
            JOptionPane.showMessageDialog(null, "Please select the product from the list");
        } else {
            OrderItem orderItem = (OrderItem)shoppingCartTable.getValueAt(selectedRow, 0);
            order.removeItem(orderItem);
            orderItem.getProduct().setAvailable(orderItem.getQuantity() +  orderItem.getProduct().getAvailable());
            refreshOrderItemTable();
            populateSuppliersProduct();
        }
    }//GEN-LAST:event_removeItemButtonActionPerformed

    private void checkOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOutButtonActionPerformed
        // TODO add your handling code here:
        if (order != null && order.getOrderItemList().size() > 0){
            order.setCreationDate(new Date());
            customer.getCustomerOrderCatalog().addOrder(order);
            JOptionPane.showMessageDialog(null, "Thanks for shopping");
            order = new Order();
            refreshOrderItemTable();
            refreshProductTable();
        } else {
            JOptionPane.showMessageDialog(null, "Shopping Cart is empty");
        }
    }//GEN-LAST:event_checkOutButtonActionPerformed
    /**
     * 
     * @param evt 
     */
    private void supplierComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierComboBoxActionPerformed
        // TODO add your handling code here:
        populateSuppliersProduct();
    }//GEN-LAST:event_supplierComboBoxActionPerformed
    /**
     * populate suppliers table
     */
    private void populateSuppliersProduct(){
        Object selectedSupplier = supplierComboBox.getSelectedItem();
        if (selectedSupplier instanceof Supplier){
            refreshProductTableBySupplier((Supplier)selectedSupplier);            
        }
        else {
            refreshProductTable();
        }
    }
    /**
     *  back button
     * @param evt 
     */
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        for(OrderItem orderItem : order.getOrderItemList()){
            orderItem.getProduct().setAvailable(orderItem.getQuantity() + orderItem.getProduct().getAvailable());
        } 
        userProcessContainer.remove(this);
        CardLayout cardLayout = (CardLayout)userProcessContainer.getLayout();
        cardLayout.previous(userProcessContainer);
    }//GEN-LAST:event_backButtonActionPerformed
    private void refreshTwoTables()
    {
        Object selectedSupplier = supplierComboBox.getSelectedItem();
        if (selectedSupplier instanceof Supplier){
            refreshProductTableBySupplier((Supplier)selectedSupplier);
        }
        else {
            refreshProductTable();
        }
        refreshOrderItemTable();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToCartButton;
    private javax.swing.JButton backButton;
    private javax.swing.JButton checkOutButton;
    private javax.swing.JTextField customerIDTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable productTable;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JTextField quantityTextField;
    private javax.swing.JButton removeItemButton;
    private javax.swing.JButton searchSupplierButton;
    private javax.swing.JTextField searchSupplierTextField;
    private javax.swing.JTable shoppingCartTable;
    private javax.swing.JComboBox supplierComboBox;
    private javax.swing.JButton updateQuantityButton;
    private javax.swing.JButton viewOrderItemDetailButton;
    private javax.swing.JButton viewProductDetailsButton;
    // End of variables declaration//GEN-END:variables
}
